cl : command line warning D9025: overriding '/sdl' with '/GS-'
  SequenceTests.cpp
C:\Users\Manue\OneDrive - USherbrooke\Bureau\tmp\sequences\SequenceTests\SequenceTests\IntegerPairVector.h(61,17): warning C4244: 'argument': conversion from 'uint64_t' to 'T', possible loss of data
          with
          [
              T=uint32_t
          ]
C:\Users\Manue\OneDrive - USherbrooke\Bureau\tmp\sequences\SequenceTests\SequenceTests\IntegerPairVector.h(61,39): warning C4244: 'argument': conversion from 'uint64_t' to 'T', possible loss of data
          with
          [
              T=uint32_t
          ]
C:\Users\Manue\OneDrive - USherbrooke\Bureau\tmp\sequences\SequenceTests\SequenceTests\IntegerPairVector.h(119,24): warning C4244: '=': conversion from 'uint64_t' to 'T', possible loss of data
          with
          [
              T=unsigned int
          ]
C:\Users\Manue\OneDrive - USherbrooke\Bureau\tmp\sequences\SequenceTests\SequenceTests\SequenceTests.cpp(297,42): warning C4244: 'return': conversion from 'uint64_t' to 'double', possible loss of data
C:\boost_1_77_0\boost\unordered\detail\implementation.hpp(1452,7): warning C4996: 'std::allocator<T>::is_always_equal': warning STL4010: Various members of std::allocator are deprecated in C++17. Use std::allocator_traits instead of accessing these members directly. You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              T=boost::unordered::detail::ptr_node<std::pair<const uint64_t,std::vector<uint32_t,std::allocator<uint32_t>>>>
          ]
C:\boost_1_77_0\boost\unordered\detail\implementation.hpp(1465): message : see reference to class template instantiation 'boost::unordered::detail::default_type_is_always_equal<Alloc,boost::integral_constant<bool,true>>' being compiled
          with
          [
              Alloc=std::allocator<boost::unordered::detail::ptr_node<std::pair<const uint64_t,std::vector<uint32_t,std::allocator<uint32_t>>>>>
          ]
C:\boost_1_77_0\boost\unordered\detail\implementation.hpp(4934): message : see reference to class template instantiation 'boost::unordered::detail::allocator_traits<std::allocator<T>>' being compiled
          with
          [
              T=boost::unordered::detail::ptr_node<std::pair<const uint64_t,std::vector<uint32_t,std::allocator<uint32_t>>>>
          ]
C:\boost_1_77_0\boost\unordered\detail\map.hpp(29): message : see reference to class template instantiation 'boost::unordered::detail::pick_node<A,std::pair<const K,T>>' being compiled
          with
          [
              A=std::allocator<std::pair<const uint64_t,std::vector<uint32_t,std::allocator<uint32_t>>>>,
              K=uint64_t,
              T=std::vector<uint32_t,std::allocator<uint32_t>>
          ]
C:\boost_1_77_0\boost\unordered\unordered_map.hpp(58): message : see reference to class template instantiation 'boost::unordered::detail::map<A,K,T,H,P>' being compiled
          with
          [
              A=std::allocator<std::pair<const uint64_t,std::vector<uint32_t,std::allocator<uint32_t>>>>,
              K=uint64_t,
              T=std::vector<uint32_t,std::allocator<uint32_t>>,
              H=boost::hash<boost::ulong_long_type>,
              P=std::equal_to<uint64_t>
          ]
C:\Users\Manue\OneDrive - USherbrooke\Bureau\tmp\sequences\SequenceTests\SequenceTests\SequenceTests.cpp(358): message : see reference to class template instantiation 'boost::unordered::unordered_map<uint64_t,std::vector<uint32_t,std::allocator<uint32_t>>,boost::hash<boost::ulong_long_type>,std::equal_to<K>,std::allocator<std::pair<const K,T>>>' being compiled
          with
          [
              K=uint64_t,
              T=std::vector<uint32_t,std::allocator<uint32_t>>
          ]
C:\boost_1_77_0\boost\unordered\detail\implementation.hpp(1452,7): warning C4996: 'std::allocator<T>::is_always_equal': warning STL4010: Various members of std::allocator are deprecated in C++17. Use std::allocator_traits instead of accessing these members directly. You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              T=boost::unordered::detail::ptr_bucket
          ]
C:\boost_1_77_0\boost\unordered\detail\implementation.hpp(1465): message : see reference to class template instantiation 'boost::unordered::detail::default_type_is_always_equal<Alloc,boost::integral_constant<bool,true>>' being compiled
          with
          [
              Alloc=std::allocator<boost::unordered::detail::ptr_bucket>
          ]
C:\boost_1_77_0\boost\unordered\detail\implementation.hpp(4935): message : see reference to class template instantiation 'boost::unordered::detail::allocator_traits<std::allocator<T>>' being compiled
          with
          [
              T=boost::unordered::detail::ptr_bucket
          ]
C:\boost_1_77_0\boost\unordered\detail\implementation.hpp(1452,7): warning C4996: 'std::allocator<std::pair<const K,T>>::is_always_equal': warning STL4010: Various members of std::allocator are deprecated in C++17. Use std::allocator_traits instead of accessing these members directly. You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              K=uint64_t,
              T=std::vector<uint32_t,std::allocator<uint32_t>>
          ]
C:\boost_1_77_0\boost\unordered\detail\implementation.hpp(1465): message : see reference to class template instantiation 'boost::unordered::detail::default_type_is_always_equal<Alloc,boost::integral_constant<bool,true>>' being compiled
          with
          [
              Alloc=std::allocator<std::pair<const uint64_t,std::vector<uint32_t,std::allocator<uint32_t>>>>
          ]
C:\boost_1_77_0\boost\unordered\unordered_map.hpp(64): message : see reference to class template instantiation 'boost::unordered::detail::allocator_traits<std::allocator<std::pair<const K,T>>>' being compiled
          with
          [
              K=uint64_t,
              T=std::vector<uint32_t,std::allocator<uint32_t>>
          ]
C:\Users\Manue\OneDrive - USherbrooke\Bureau\tmp\sequences\SequenceTests\SequenceTests\SequenceTests.cpp(417,46): warning C4244: 'argument': conversion from 'uint64_t' to '_Ty', possible loss of data
          with
          [
              _Ty=uint32_t
          ]
C:\Users\Manue\OneDrive - USherbrooke\Bureau\tmp\sequences\SequenceTests\SequenceTests\SequenceTests.cpp(425,37): warning C4244: 'argument': conversion from 'uint64_t' to '_Ty', possible loss of data
          with
          [
              _Ty=uint32_t
          ]
C:\Users\Manue\OneDrive - USherbrooke\Bureau\tmp\sequences\SequenceTests\SequenceTests\SequenceTests.cpp(647,31): warning C4244: '+=': conversion from 'uint64_t' to 'int', possible loss of data
  Generating code
  Not all modules are compiled with -Gy (function comdat), build without incremental LTCG.
  Finished generating code
  SequenceTests.vcxproj -> C:\Users\Manue\OneDrive - USherbrooke\Bureau\tmp\sequences\SequenceTests\x64\Release\SequenceTests.exe
